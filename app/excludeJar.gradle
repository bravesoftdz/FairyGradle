configurations {
    exclude
}

//需要剔除的包名
def excludePackages = [""]
//需要剔除的文件名
def excludeClasses = [""]

task printMsg {
    group "Fairy"
    doLast {
        println getExcludePackageRegex(excludePackages)
        println getExcludeClassRegex(excludeClasses)
        file("./rule.txt").eachLine { line ->
            println line
        }
    }
}

def unZipAarFile = new File(buildDir, "unzipaar")
def unZipJarFile = new File(buildDir, 'unzipjar')
def excludeAarFile = new File(buildDir, "excludeaar")


def getDefaultAar() {
    Configuration c = configurations.getByName("default")
    def files = c.artifacts.files.filter {
        it.name ==~ /.*\.jar/
    }
    def file = null
    if (!files.empty) {
        file = files[0]
    }
    return file
}

task deleteDir(type: Delete) {
    delete unZipAarFile, unZipJarFile, excludeAarFile
}

deleteDir.dependsOn printMsg


task unzipJar(type: Copy) {
    def zipFile = getDefaultAar()
    def outputDir = unZipJarFile
    from zipTree(zipFile)
    into outputDir
}

unzipJar.dependsOn deleteDir

task zipJar(type: Jar) {
    baseName = 'classes'
    from unZipJarFile
    destinationDir unZipAarFile
    exclude getExcludePackageRegex(excludePackages)
    exclude getExcludeClassRegex(excludeClasses)
}

zipJar.dependsOn unzipJar

task replaceJar(type: Exec) {
    workingDir project.projectDir.absoluteFile
    commandLine "cmd", "/c", "java -jar jarjar-1.4.jar process rule.txt ./build/unzipaar/classes.jar ./build/unzipaar/classes.jar"
}

replaceJar.dependsOn zipJar

static def getExcludePackageRegex(def packages) {
    packages?.collect {
        it?.replace('.', '\\')?.plus("\\**")
    }
}

static def getExcludeClassRegex(def classes) {
    classes?.collect {
        it?.replace('.', '\\')?.plus(".class")
    }
}